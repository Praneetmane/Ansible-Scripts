---
- name: Load variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family|lower }}.yml"
        - defaults.yml
      paths:
        - ../packages/vars

- name: "Update apt cache if Ubuntu/Debian"
  apt:
    update_cache: yes
  vars:
    ansible_python_interpreter: '/usr/bin/python3'
  when: ansible_os_family == "Debian"

- name: Add Docker GPG key
  apt_key: url=https://download.docker.com/linux/ubuntu/gpg

- name: Add Docker APT repository
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ansible_distribution_release}} stable

- name: Remove debian packages set to be uninstalled
  apt: 
    name: "{{ cleanup_debian_pkgs | join(',') }}" 
    state: absent
  tags: cleanup  

- name: Add debian packages set to be installed
  apt:
    name: "{{ debian_pkgs | join(',') }}" 
    update_cache: true
    state: present

- include: roles/packages/include/pip_install.yml
  with_items: "{{ python_pkgs }}"
  loop_control: 
    loop_var: pkg_name
    
- name: Uninstall python packages using pip
  pip: 
    name: "{{ item }}"
    state: absent
  with_items: "{{ cleanup_python_pkgs }}"
  tags: cleanup  

- name: Remove Python packages that were installed from local source/mount
  shell: |
    cd {{ custom_install_path }}
    rm -rf {{ item }}
  with_items: "{{ cleanup_python_pkgs }}"
  tags: cleanup  
    
- name: Install C packages (from source)
  shell: |
    tar -xvf {{ offline_cpkgs_tar_path }}/{{ item }}.tar.gz -C {{ custom_install_path }}
    cd {{ custom_install_path }}/{{ item }}/
    sudo ./configure
    sudo make
    sudo make install
  with_items: "{{ c_pkgs }}"

- name: Remove C packages from that were installed from local source/mount
  shell: |
    cd {{ custom_install_path }}
    rm -rf {{ item }}
  with_items: cleanup_c_pkgs
  tags: cleanup  

- name: 'Check if Go is already installed and if so, register its version'
  shell: "{{ go_parentdir }}/go/bin/go version"
  ignore_errors: true
  register: go_installed_version
  changed_when: false

- name: Remove the previous Go installation
  file:
    path: "{{ go_parentdir }}/go"
    state: absent
  when: go_version not in go_installed_version.stdout

- name: Download the Go tarball
  get_url:
    url: "{{ go_download_url }}/go{{ go_version }}.linux-amd64.tar.gz"
    checksum: "{{ go_checksum }}"
    dest: "{{ go_parentdir }}/src"
  when: go_installed_version.failed == true or go_version not in go_installed_version.stdout  

- name: Extract the downloaded Go tarball
  unarchive:
    src: "{{ go_parentdir }}/src/go{{ go_version }}.linux-amd64.tar.gz"
    dest: "{{ go_parentdir }}"
    remote_src: yes
  when: go_installed_version.failed == true or go_version not in go_installed_version.stdout

- name: Create the bash profile that adds the Go PATH for all users
  copy:
    src: go_bin.sh
    dest: /etc/profile.d/go_bin.sh
    owner: root
    group: root
    mode: 0755

- name: Install golang packages
  shell: |
    . /etc/profile.d/go_bin.sh
    go get {{ item }}
  with_items: "{{ golang_pkgs }}"

- name: Remove golang packages
  shell: |
    rm -rf {{ go_install_dir }}/bin/{{ item }}
  with_items: "{{ cleanup_golang_pkgs }}"
  

## TODO: Check provision of package name and its version in vars file. Add the loop and relevant iteration code below  
#- name: Install list of npm packages
#  npm:
#    name: "{{ npm | join(',') }}"
#    global: yes
